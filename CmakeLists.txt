# Set the minimum required version of CMake. 3.16 is a good modern baseline.
cmake_minimum_required(VERSION 3.16)

# Define the project name, version, and language.
project(cgui_example VERSION 1.0 LANGUAGES CXX)

# Set the C++ standard to C++17. Your code uses modern features.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find the Raylib package.
# This is the modern CMake way to handle dependencies. The GitHub Actions
# workflow will be responsible for making sure Raylib is installed and findable.
find_package(raylib REQUIRED)

# Add the main executable target.
# It's built from main.cpp. Since cgui.h is a header-only implementation,
# it doesn't need to be listed here; the #include directive is enough.
add_executable(cgui_example main.cpp)

# Link the executable against the Raylib library.
# The `raylib::raylib` target is an "imported target" created by `find_package`.
# It automatically handles all necessary system libraries (like OpenGL, winmm,
# Cocoa, etc.) for each platform.
target_link_libraries(cgui_example PRIVATE raylib::raylib)

# Tell CMake that our executable needs to include files from the current directory.
# This ensures that `#include "cgui.h"` works reliably.
target_include_directories(cgui_example PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

# --- Optional but Recommended: Installation Rules ---
# This defines what happens when you run "cmake --install".
install(TARGETS cgui_example DESTINATION bin)
